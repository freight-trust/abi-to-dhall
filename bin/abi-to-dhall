#!/usr/bin/env bash
set -eo pipefail

filepath() {
  echo "$(cd ${1%/*} && pwd)/${1##*/}"
}

LIB_DIR=$(cd "${LIB_DIR-${0%/*}/../dhall}" && pwd)
PACKAGE_PATH="$LIB_DIR/package.dhall"
if [[ $1 =~ / ]]; then
  BACKEND_PATH=$(filepath "$1")
else
  BACKEND_PATH=$(filepath "$LIB_DIR/backends/$1")
fi
OUT_ABI_DIR="$PWD/abi"
OUT_LIB_DIR="$PWD/lib"

gen() {
  local abiPath
  abiPath="$1"
  local contractName
  contractName="${abiPath##*/}"
  contractName="${contractName%.*}"
  local abiDhall
  abiDhall="$OUT_ABI_DIR/abi_$contractName.dhall"

  echo -n >&2 "$abiPath â†’ "

  if {
    sed 's/\[\]"/_list"/g' "$abiPath" \
      | json-to-dhall --records-strict --unions-strict "($PACKAGE_PATH).abiSchema.Abi" \
      > "$abiDhall"
    dhall text <<<"($PACKAGE_PATH).abiGenerator $BACKEND_PATH \"$contractName\" $abiDhall" \
      | dhall format > "$OUT_ABI_DIR/$contractName"
  }; then
    echo >&2 "$OUT_ABI_DIR/$contractName"
  else
    echo >&2 "Failed!"
  fi
}

#rm -rf "$OUT_ABI_DIR" "$OUT_LIB_DIR"
mkdir -p "$OUT_ABI_DIR" "$OUT_LIB_DIR"
dhall <<<"($PACKAGE_PATH).lib" > "$OUT_LIB_DIR/default"
dhall <<<"($BACKEND_PATH).util" > "$OUT_LIB_DIR/backend"

types='
  [ "void"
  , "hex"
  , "address"
  , "uint256"
  , "bytes"
  , "bytes4"
  , "bytes32"
  ]'

dhall text <<<"($PACKAGE_PATH).typesGenerator.constructors $types" \
  | dhall format > "$OUT_LIB_DIR/typeConstructors"
dhall text <<<"($PACKAGE_PATH).typesGenerator.types $types" \
  | dhall format > "$OUT_LIB_DIR/types"

for fn in "${@:2}"; do gen "$fn"; done
