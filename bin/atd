#!/usr/bin/env bash
set -eo pipefail

BIN_PATH=$(realpath "${0%/*}")
PATH="$BIN_PATH:$PATH"

usage() {
  local ecode=0
  if [[ -n $1 ]]; then echo >&2 "Error: $1"; ecode=1; fi

  # TODO: Fix "bash: compgen: command not found" when wrapped with nix.
  runtimes=$(command -v compgen >/dev/null \
    && echo "(available: $(compgen -c | sed -n 's/^atd-to-/, /p' | sort -u | tr -d '\n' | sed 's/^, //'))" \
    || echo "(eg. seth)")

  echo -n >&2 "
Usage: atd
          build [--module NAME] [ABI_BIN_DIR]
          link  DEP_DIR
          ast   ([--input SCHEMA FILE]..) ([--ast FILE] | [--file FILE] | [--expr EXPR] | [-- EXPR..])
          print RUNTIME [--args ARG.. \;] ([--input SCHEMA FILE]..) ([--ast FILE] | [--file FILE] | [--expr EXPR] | [-- EXPR..])
          run   RUNTIME [--args ARG.. \;] ([--input SCHEMA FILE]..) ([--ast FILE] | [--file FILE] | [--expr EXPR] | [-- EXPR..])
          help

Commands:
  build   Create './atd' directory
  link    Add another abi-to-dhall project as a dependency
  ast     Print AST to STDOUT
  print   Print a runtimes deployment plan to STDOUT
  run     Execute a runtime deployment
  help    Print this message

Arguments:
  ABI_BIN_DIR
          Path to a directory containing ABI and BIN files
  DEP_DIR
          Path to a project directory containing a './atd' directory
  RUNTIME
          Name of runtime to use ${runtimes}.

          You can add your own runtimes by adding executables with the name
          'atd-to-*' to your PATH. The program will be called and the AST will
          be piped to its STDIN.

Options:
  --module NAME
          Separate shared ABI/BIN files for this build to avoid conflicts with
          dependencies
  --args ARG..
          Arguments to pass to runtime process, needs to be ended with '\;'
  -i,--input SCHEMA FILE
          Use a JSON file with the given SCHEMA as input, can be given multiple
          times
  -a,--ast FILE
          A deploy AST file to use instead of Dhall code
  -f,--file FILE
          A Dhall expression to evaluate as deploy config
  -e,--expr DHALL_EXPRESSION
          A Dhall expression to evaluate as deploy config
  -- DHALL_EXPRESSION..
          Use rest of arguments as a Dhall expression (similar to --expr)

Environment variables:
  ATD_PATH
          Use alternative path to dependencies

Version: ${_VERSION:-unknown}
"
  exit $ecode
}

setExpr() {
  [[ -z $astFile && -z $expression ]] \
    || usage "Arguments --ast, --file, --expr and -- are mutually exclusive."
  expression="$1"
}

setAst() {
  [[ -z $astFile && -z $expression ]] \
    || usage "Arguments --ast, --file, --expr and -- are mutually exclusive."
  astFile="$1"
}

build() {
  local abiDir="${ATD_ABI_DIR:-./out}"
  local module
  while [[ -n $1 ]]; do
    case "$1" in
      --module) shift
        ATD_MODULE="$1"
        ;;
      -*)
        usage "\"$1\" is not a recognized option."
        ;;
      *)
        abiDir="$1"
        break
        ;;
    esac
    shift
  done

  module="${ATD_MODULE:-${PWD##*/}}"
  module="${module// /-}"

  if [[ -n $ATD_PATH ]]; then
    echo >&2 "Creating './atd' as symlink to '$ATD_PATH' because ATD_PATH is set."

    rm -rf ./atd
    ln -sT "$ATD_PATH" ./atd
  else
    [[ -d $abiDir ]] \
      || usage "Not creating './atd' directory because '$abiDir' is not a directory."

    rm -rf ./atd
    for dir in $(find -L "$abiDir/" -maxdepth 1 -type d); do
      "$BIN_PATH"/abi-to-dhall \
        --module "$module" \
        --namespace "${dir##*/}" \
        $(find -L "$dir" -maxdepth 1 -type f -name "*.abi")
    done
    "$BIN_PATH"/abi-to-dhall  --update-package
  fi
}

link() {
  local depDir
  while [[ -n $1 ]]; do
    case "$1" in
      -*)
        usage "\"$1\" is not a recognized option."
        ;;
      *)
        depDir="$1"
        break
        ;;
    esac
    shift
  done

  [[ -d ./atd ]] || usage "No './atd' directory found try the \`build\` command."
  [[ -w ./atd ]] || usage "'./atd' directory is not writable."
  [[ -d $depDir ]] || usage "No dependency path given."
  [[ -d "$depDir/atd" ]] || usage "No './atd' directory found in dependency path."

  ln -sfv -t ./atd/dep "$depDir"
  ln -sfv -t ./atd/evm "$depDir"/atd/evm/*
}

runArgs() {
  while [[ -n $1 ]]; do
    case "$1" in
      --args) shift
        while [[ -n $1 && $1 != ";" ]]; do
          runtimeArgs+=( "$1" )
          shift
        done
        shift
        ;;
      *)
        astArgs "${@}"
        break
        ;;
    esac
  done
}

astArgs() {
  while [[ -n $1 ]]; do
    case "$1" in
      -i|--input) shift
        [[ -f $2 ]] || usage "\"$2\" is not a file."
        inputExpr+=" $(json-to-dhall --records-loose "$1" < "$2")"
        shift
        ;;
      -a|--ast) shift
        [[ -f $1 ]] || usage "\"$1\" is not a file."
        setAst "$1"
        ;;
      -f|--file) shift
        [[ -f $1 ]] || usage "\"$1\" is not a file."
        setExpr "$(realpath "$1")"
        ;;
      -e|--expr) shift
        setExpr "$1"
        ;;
      --) shift
        setExpr "$*"
        break
        ;;
      *)
        usage "\"$1\" is not a recognized argument."
        ;;
    esac
    shift
  done

  [[ -z $astFile ]] || return 0

  [[ -n $expression ]] || usage "No Dhall expression or file given."

  if [[ -n $inputExpr ]]; then
    expression+="$inputExpr"
    inputExpr=""
  fi
}

ast() {
  astArgs "$@"

  if [[ -n $astFile ]]; then
    [[ -f $astFile ]] || usage "'$astFile' is not a file"
    jq . "$astFile"
  else
    dhall text <<<"(${ATD_PATH:-./atd}/package).render ($expression)" | jq .
  fi
}

plugin() {
  local name="$1"
  local action="$2"
  local cmd="atd-to-$name"
  [[ ! $name =~ ^- ]] \
    || usage "'$name' not a valid runtime name."
  command -v "$cmd" >/dev/null \
    || usage "Runtime '$name' not available, please make '$cmd' available in your PATH."

  runArgs "${@:3}"

  astJson=$(ast)
  ATD_PATH="${ATD_PATH:-$PWD/atd}" $cmd "$action" "${runtimeArgs[@]}" <<<"$astJson"
}

print() {
  plugin "$1" print "${@:2}"
}

run() {
  plugin "$1" run "${@:2}"
}

case "$1" in
  build|link)
    if [[ -n $ATD_NO_LINK ]]; then
      echo >&2 "Refusing to build when ATD_NO_LINK is set."
    else
      $1 "${@:2}"
    fi
    ;;
  ast|print|run)
    if [[ -z $ATD_NO_LINK ]]; then
      if [[ -n $ATD_PATH ]]; then
        [[ ! -e ./atd || $(realpath ./atd) == $(realpath "$ATD_PATH") ]] \
          || usage "Using pre-built dependencies, remove existing './atd' first."
        ln -sfT "$ATD_PATH" ./atd
      fi
      [[ -d ./atd ]] || usage "No './atd' directory found try the \`build\` command or set ATD_PATH."
    fi
    $1 "${@:2}"
    ;;
  help)
    usage
    ;;
  *)
    usage "\"$1\" is not a command."
    ;;
esac
