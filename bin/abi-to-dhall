#!/usr/bin/env bash
set -eo pipefail

usage() {
  if [ "$1" ]; then echo >&2 "Error: $1"; fi
  echo >&2 "
Usage: abi-to-dall [--backend BACKEND] FILES..

Arguments:
  FILES..
          ABI file paths

Options:
  --backend BACKEND
          (Depricated)
"
  exit 1
}

filepath() {
  echo "$(cd ${1%/*} && pwd)/${1##*/}"
}

gen() {
  local abiPath
  abiPath="$1"
  local binPath
  binPath="${abiPath##*/}"
  binPath="${binPath%.*}.bin"
  binPath="${abiPath%/*}/$binPath"
  local contractName
  contractName="${abiPath##*/}"
  contractName="${contractName%.*}"
  local abiDhall
  abiDhall="$OUT_ABI_DIR/abi_$contractName.dhall"

  echo -n >&2 "$abiPath -> "

  if {
    sed 's/\[\]"/_list"/g' "$abiPath" \
      | json-to-dhall --records-strict --unions-strict "($PACKAGE_PATH).abiSchema.Abi" \
      > "$abiDhall" \
    && dhall text <<<"($PACKAGE_PATH).abiGenerator $BACKEND_PATH \"$contractName\" $abiDhall" \
      | dhall format > "$OUT_ABI_DIR/$contractName"
  }; then
    {
      cp "$abiPath" "$DAPP_OUT_DIR" || true
      cp "$binPath" "$DAPP_OUT_DIR" || true
    } >&2
    echo >&2 "$OUT_ABI_DIR/$contractName"
    echo "$contractName"
  else
    echo >&2 "Failed!"
    exit 1
  fi
}

main() {
  mkdir -p "$OUT_ABI_DIR" "$OUT_LIB_DIR" "$OUT_DEPS_DIR" "$DAPP_OUT_DIR"
  ln -sfT "$PRELUDE_PATH" "$OUT_LIB_DIR/Prelude"
  dhall <<<"($PACKAGE_PATH).lib" > "$OUT_LIB_DIR/lib"
  dhall <<<"($BACKEND_PATH).util" > "$OUT_LIB_DIR/backend"

  dhall text <<<"($PACKAGE_PATH).typesGenerator $BACKEND_PATH ($PACKAGE_PATH).typesConversions" \
    | dhall format > "$OUT_LIB_DIR/types"

  echo "\"${BACKEND_NAME}\"" > "$OUT_LIB_DIR/.backend"

  local contracts=$(for fn in "$@"; do gen "$fn"; done) || exit $?

  dhall format <<<"
    { Prelude = ./Prelude/package.dhall
    , abis =
      {$(sed 's|\(.*\)|,\1 = ./abi/\1|;1s/,//' <<<"$contracts")
      }
    } ⫽ ./lib ⫽ ./backend ⫽ ./types
  " > "$OUT_LIB_DIR/package"
}

while [ "$1" ]; do
  case "$1" in
    --backend) shift
      BACKEND="$1"
      ;;
    -*)
      usage "\"$1\" is not a recognized option."
      ;;
    *) break
      ;;
  esac
  shift
done

LIB_DIR=$(cd "${LIB_DIR-${0%/*}/../dhall}" && pwd)
PRELUDE_PATH=$(cd "${PRELUDE_PATH-${0%/*}/../dhall-lang/Prelude}" && pwd)
PACKAGE_PATH="$LIB_DIR/package.dhall"
BACKEND=${BACKEND:-json}
if [[ $BACKEND =~ / ]]; then
  BACKEND_PATH=$(filepath "$BACKEND")
else
  BACKEND_PATH=$(filepath "$LIB_DIR/backends/$BACKEND.dhall")
fi
BACKEND_NAME="${BACKEND_PATH##*/}"
BACKEND_NAME="${BACKEND_NAME%.*}"

OUT_DIR="$PWD/atd" #$(mktemp -d)
OUT_LIB_DIR="$OUT_DIR"
OUT_ABI_DIR="$OUT_DIR/abi"
OUT_DEPS_DIR="$OUT_DIR/deps"
DAPP_OUT_DIR="$OUT_DIR/dapp"

main "$@"
